# Define input and output file paths
$InputFile = "C:\Temp\AD_Accounts.txt"   # File containing SAMAccountNames (one per line)
$OutputFile = "C:\Temp\AD_Inheritance_Results.txt"
$ErrorLog = "C:\Temp\AD_Inheritance_Errors.txt"

# Check if input file exists
if (-Not (Test-Path $InputFile)) {
    Write-Host "Input file not found at $InputFile"
    exit
}

# Clear previous results
if (Test-Path $OutputFile) { Clear-Content $OutputFile }
if (Test-Path $ErrorLog) { Clear-Content $ErrorLog }

# Process each account in the input file
foreach ($SAMAccountName in Get-Content $InputFile) {
    $SAMAccountName = $SAMAccountName.Trim()
    
    if ($SAMAccountName -ne "") {
        try {
            # Get the distinguished name (DN) of the AD object
            $ADObject = Get-ADUser -Identity $SAMAccountName -Properties DistinguishedName -ErrorAction Stop | Select-Object -ExpandProperty DistinguishedName
            
            # Get the security descriptor of the AD object
            $Acl = Get-Acl -Path "AD:$ADObject" -ErrorAction Stop

            # Check inheritance status
            if ($Acl.AreAccessRulesProtected -eq $false) {
                $Result = "$SAMAccountName - Inheritance is ENABLED"
            } else {
                $Result = "$SAMAccountName - Inheritance is DISABLED"
            }

            # Write result to output file
            $Result | Out-File -FilePath $OutputFile -Append
            Write-Host $Result

        } catch {
            # Log errors separately
            $ErrorMessage = "$SAMAccountName - Error: $_"
            $ErrorMessage | Out-File -FilePath $ErrorLog -Append
            Write-Host $ErrorMessage -ForegroundColor Red
        }
    }
}

Write-Host "Results saved to $OutputFile"
Write-Host "Errors saved to $ErrorLog (if any)"










# Input and Output File Paths
$inputFile = "C:\Path\To\accounts.txt"  # Update this path
$outputFile = "C:\Path\To\AD_OU_Report.csv"  # Update this path

# Check if input file exists
if (-Not (Test-Path $inputFile)) {
    Write-Host "Input file not found!"
    exit
}

# Initialize an array to store results
$results = @()

# Read usernames from the input file
$users = Get-Content $inputFile

foreach ($user in $users) {
    # Get user details from AD
    $adUser = Get-ADUser -Identity $user -Properties DistinguishedName -ErrorAction SilentlyContinue

    if ($adUser) {
        # Extract OU from DistinguishedName
        $ou = ($adUser.DistinguishedName -replace '^CN=.*?,','')

        # Store results in an object
        $results += [PSCustomObject]@{
            Username = $user
            OU = $ou
        }
    } else {
        # Store not found users
        $results += [PSCustomObject]@{
            Username = $user
            OU = "Not Found"
        }
    }
}

# Export results to CSV
$results | Export-Csv -Path $outputFile -NoTypeInformation

Write-Host "OU information exported to $outputFile"










# Input and Output File Paths
$inputFile = "C:\Path\To\accounts.txt"  # Update this path
$outputFile = "C:\Path\To\AD_User_Report.csv"  # Update this path

# Check if input file exists
if (-Not (Test-Path $inputFile)) {
    Write-Host "Input file not found!"
    exit
}

# Initialize an array to store results
$results = @()

# Read SamAccountNames from the input file
$users = Get-Content $inputFile

foreach ($user in $users) {
    # Get user details from AD
    $adUser = Get-ADUser -Identity $user -Properties DistinguishedName, SamAccountName, Name, UserPrincipalName, Enabled, Mail, LastLogonDate, Modified -ErrorAction SilentlyContinue

    if ($adUser) {
        # Extract OU from DistinguishedName
        $ou = ($adUser.DistinguishedName -replace '^CN=.*?,','')

        # Store results in an object
        $results += [PSCustomObject]@{
            SamAccountName   = $adUser.SamAccountName
            Name             = $adUser.Name
            UserPrincipalName = $adUser.UserPrincipalName
            Enabled          = $adUser.Enabled
            Mail             = $adUser.Mail
            LastLogon        = $adUser.LastLogonDate
            LastModified     = $adUser.Modified
            OU               = $ou
        }
    } else {
        # Store not found users
        $results += [PSCustomObject]@{
            SamAccountName   = $user
            Name             = "Not Found"
            UserPrincipalName = "Not Found"
            Enabled          = "Not Found"
            Mail             = "Not Found"
            LastLogon        = "Not Found"
            LastModified     = "Not Found"
            OU               = "Not Found"
        }
    }
}

# Export results to CSV
$results | Export-Csv -Path $outputFile -NoTypeInformation

Write-Host "User details exported to $outputFile"







# Input and Output File Paths
$inputFile = "C:\Path\To\accounts.txt"  # Update this path
$outputFile = "C:\Path\To\AD_User_Report.csv"  # Update this path

# Check if input file exists
if (-Not (Test-Path $inputFile)) {
    Write-Host "Input file not found!"
    exit
}

# Initialize an array to store results
$results = @()

# Read SamAccountNames from the input file
$users = Get-Content $inputFile

foreach ($user in $users) {
    # Get user details from AD
    $adUser = Get-ADUser -Identity $user -Properties DistinguishedName, SamAccountName, Name, UserPrincipalName, Enabled, Mail, LastLogonDate, Modified, PasswordLastSet -ErrorAction SilentlyContinue

    if ($adUser) {
        # Extract OU from DistinguishedName
        $ou = ($adUser.DistinguishedName -replace '^CN=.*?,','')

        # Convert PasswordLastSet to human-readable format
        $passwordLastSet = if ($adUser.PasswordLastSet -ne $null) { 
            [datetime]::FromFileTimeUtc($adUser.PasswordLastSet).ToString("yyyy-MM-dd HH:mm:ss") 
        } else { 
            "Never Set" 
        }

        # Store results in an object
        $results += [PSCustomObject]@{
            SamAccountName    = $adUser.SamAccountName
            Name              = $adUser.Name
            UserPrincipalName = $adUser.UserPrincipalName
            Enabled           = $adUser.Enabled
            Mail              = $adUser.Mail
            LastLogon         = $adUser.LastLogonDate
            LastModified      = $adUser.Modified
            PasswordLastSet   = $passwordLastSet
            OU                = $ou
        }
    } else {
        # Store not found users
        $results += [PSCustomObject]@{
            SamAccountName    = $user
            Name              = "Not Found"
            UserPrincipalName = "Not Found"
            Enabled           = "Not Found"
            Mail              = "Not Found"
            LastLogon         = "Not Found"
            LastModified      = "Not Found"
            PasswordLastSet   = "Not Found"
            OU                = "Not Found"
        }
    }
}

# Export results to CSV
$results | Export-Csv -Path $outputFile -NoTypeInformation

Write-Host "User details exported to $outputFile"













# Prompt for the AD object name
$ADObjectName = Read-Host "Enter the SAMAccountName of the AD object"

# Get the distinguished name (DN) of the AD object
$ADObject = Get-ADUser -Identity $ADObjectName -Properties DistinguishedName | Select-Object -ExpandProperty DistinguishedName

if ($ADObject) {
    # Get the security descriptor of the AD object
    $Acl = Get-Acl -Path "AD:$ADObject"

    # Check inheritance status
    if ($Acl.AreAccessRulesProtected -eq $false) {
        $Result = "Inheritance is ENABLED for $ADObject"
    } else {
        $Result = "Inheritance is DISABLED for $ADObject"
    }

    # Output file path
    $OutputFile = "C:\Temp\AD_Inheritance_Check.txt"

    # Write result to file
    $Result | Out-File -FilePath $OutputFile -Append
    Write-Host "Result saved to $OutputFile"
} else {
    Write-Host "AD object not found!"
}











# Define input and output file paths
$InputFile = "C:\Temp\AD_Accounts.txt"  # File containing SAMAccountNames (one per line)
$OutputFile = "C:\Temp\AD_Inheritance_Results.txt"

# Check if input file exists
if (-Not (Test-Path $InputFile)) {
    Write-Host "Input file not found at $InputFile"
    exit
}

# Clear output file before writing new results
if (Test-Path $OutputFile) {
    Clear-Content $OutputFile
}

# Process each account in the input file
foreach ($SAMAccountName in Get-Content $InputFile) {
    $SAMAccountName = $SAMAccountName.Trim()
    
    if ($SAMAccountName -ne "") {
        # Get the distinguished name (DN) of the AD object
        $ADObject = Get-ADUser -Identity $SAMAccountName -Properties DistinguishedName -ErrorAction SilentlyContinue | Select-Object -ExpandProperty DistinguishedName

        if ($ADObject) {
            # Get the security descriptor of the AD object
            $Acl = Get-Acl -Path "AD:$ADObject"

            # Check inheritance status
            if ($Acl.AreAccessRulesProtected -eq $false) {
                $Result = "$SAMAccountName - Inheritance is ENABLED"
            } else {
                $Result = "$SAMAccountName - Inheritance is DISABLED"
            }
        } else {
            $Result = "$SAMAccountName - Account not found"
        }

        # Append result to output file
        $Result | Out-File -FilePath $OutputFile -Append
        Write-Host $Result
    }
}

Write-Host "Results saved to $OutputFile"
