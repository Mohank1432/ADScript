<#
.SYNOPSIS
    Generates a comprehensive report on specified Active Directory users, including password expiry details.
.DESCRIPTION
    This script retrieves a list of Active Directory users from one of two sources:
    1. A configurable LDAP filter.
    2. An input CSV file containing a list of sAMAccountNames.

    For each user, it reports on their sAMAccountName, account type, manager details, and creation date.
    It automatically detects membership in password rotation groups to calculate and report on the
    password policy, expiry date, and days remaining. It also verifies the existence of corresponding
    _RW and _RO groups and their managers.

.NOTES
    Version: 2.2 (Feature Update)
    Author: Senior PowerShell and Active Directory Automation Specialist
    Prerequisites: Active Directory module for Windows PowerShell (RSAT-AD-PowerShell).
    Execution Policy: The script must be run under an execution policy that allows script execution (e.g., RemoteSigned).
    Permissions: The executing account needs read permissions for user and group objects in Active Directory.
#>

#================================================================================
# SCRIPT EXECUTION WRAPPER WITH LOGGING AND ERROR HANDLING
#================================================================================

Try {
    #----------------------------------------------------------------------------
    # CONFIGURATION
    #----------------------------------------------------------------------------
    $OutputPath = "C:\Temp\AD_User_Group_Report.csv"
    $LogPath = "C:\Temp\Logs"

    # --- CHOOSE ONE INPUT METHOD ---

    # METHOD 1: LDAP Filter (Default)
    # To use this, leave $InputCsvPath blank.
    $LDAPFilter = "(&(objectCategory=person)(objectClass=user)(!(userAccountControl:1.2.840.113556.1.4.803:=2))(|(company=*Resource*)(company=Resource-Service))(!(company=Resource-Admin)))"
    
    # METHOD 2: Input CSV File
    # To use this, provide the full path to your CSV file. The script will prioritize this over the LDAP filter.
    # The CSV file must contain a header with the user account names.
    $InputCsvPath = "" # Example: "C:\Temp\ServiceAccounts.csv"
    $CsvHeaderName = "sAMAccountName" # The name of the column in your CSV that contains the account names.

    # --- Group and Policy Configuration ---
    $InScopeGroupNames = @("norotation", "30dayrotation", "90dayrotation", "180dayrotation", "365dayrotation", "phase1", "phase2")
    $RotationPolicyMap = @{
        'norotation'     = -1
        '30dayrotation'  = 30
        '90dayrotation'  = 90
        '180dayrotation' = 180
        '365dayrotation' = 365
    }
    $NonInteractiveGroupName = "deny_interactvie"

    #----------------------------------------------------------------------------
    # INITIALIZATION
    #----------------------------------------------------------------------------
    if (-not (Test-Path -Path $LogPath -PathType Container)) {
        Write-Verbose "Log directory not found. Creating it at: $LogPath"
        New-Item -Path $LogPath -ItemType Directory -Force | Out-Null
    }
    $Timestamp = Get-Date -Format 'yyyyMMdd-HHmmss'
    $TranscriptPath = Join-Path -Path $LogPath -ChildPath "AD_User_Report_$Timestamp.log"
    Start-Transcript -Path $TranscriptPath
    Write-Host "Script execution started. Logging to: $TranscriptPath"

    if (-not (Get-Module -Name ActiveDirectory -ListAvailable)) {
        throw "The Active Directory module for Windows PowerShell is not installed. Please install RSAT-AD-PowerShell."
    }

    #============================================================================
    # PHASE 1: BULK DATA ACQUISITION AND CACHING
    #============================================================================
    Write-Host "Phase 1: Starting bulk data acquisition from Active Directory..."

    $adUsers = $null
    # âœ¨ NEW: Logic to determine the input source (CSV or LDAP)
    if (-not [string]::IsNullOrEmpty($InputCsvPath) -and (Test-Path -Path $InputCsvPath -PathType Leaf)) {
        Write-Host "Input CSV file specified. Reading users from: $InputCsvPath"
        try {
            $samAccountNames = (Import-Csv -Path $InputCsvPath).$CsvHeaderName
            if ($null -eq $samAccountNames -or $samAccountNames.Count -eq 0) {
                throw "CSV file is empty or the header '$CsvHeaderName' was not found."
            }
            # This is more efficient than calling Get-ADUser for each name in a loop.
            $userFilterFromCsv = '(|' + ($samAccountNames | ForEach-Object { "(sAMAccountName=$_)" }) + ')'
            $adUsers = Get-ADUser -LDAPFilter $userFilterFromCsv -Properties manager, whenCreated, pwdLastSet, memberOf, company, DistinguishedName -ErrorAction Stop
        }
        catch {
            throw "Failed to read or process the input CSV file '$InputCsvPath'. Error: $($_.Exception.Message)"
        }
    }
    else {
        Write-Host "Using LDAP filter to retrieve users."
        $adUsers = Get-ADUser -LDAPFilter $LDAPFilter -Properties manager, whenCreated, pwdLastSet, memberOf, company, DistinguishedName -ErrorAction Stop
    }

    if ($null -eq $adUsers) { throw "No users found based on the specified input method. Halting execution." }
    Write-Host "$($adUsers.Count) users retrieved for processing."

    # 1.2: Pre-cache all "in-scope" groups
    Write-Verbose "Caching in-scope group information..."
    $inScopeGroupLookup = @{}
    if ($InScopeGroupNames.Count -gt 0) {
        $groupFilter = '(|' + ($InScopeGroupNames | ForEach-Object { "(sAMAccountName=$_)" }) + ')'
        Get-ADGroup -LDAPFilter $groupFilter | ForEach-Object { $inScopeGroupLookup[$_.DistinguishedName] = $_.sAMAccountName }
    }
    Write-Host "$($inScopeGroupLookup.Count) in-scope groups cached."
    
    # 1.3: Pre-cache members of the non-interactive group
    Write-Verbose "Caching members of the '$NonInteractiveGroupName' group..."
    $nonInteractiveUserCache = @{}
    try {
        $denyGroupMembers = Get-ADGroupMember -Identity $NonInteractiveGroupName -ErrorAction Stop
        foreach ($member in $denyGroupMembers) { $nonInteractiveUserCache[$member.DistinguishedName] = $true }
        Write-Host "$($nonInteractiveUserCache.Count) non-interactive users cached."
    }
    catch { Write-Warning "Could not find the group '$NonInteractiveGroupName'. All users will be marked as Interactive." }

    # 1.4: Pre-cache all potential _RW and _RO groups
    $potentialGroupNames = [System.Collections.Generic.List[string]]::new()
    foreach ($user in $adUsers) {
        $potentialGroupNames.Add("$($user.sAMAccountName)_RW")
        $potentialGroupNames.Add("$($user.sAMAccountName)_RO")
    }
    $rwGroupCache = @{}
    $roGroupCache = @{}
    $batchSize = 400
    for ($i = 0; $i -lt $potentialGroupNames.Count; $i += $batchSize) {
        $batch = $potentialGroupNames.GetRange($i, [System.Math]::Min($batchSize, $potentialGroupNames.Count - $i))
        $groupLDAPFilter = "(|" + ($batch | ForEach-Object { "(sAMAccountName=$_)" }) + ")"
        $foundGroups = Get-ADGroup -LDAPFilter $groupLDAPFilter -Properties managedBy, member -ErrorAction SilentlyContinue
        foreach ($group in $foundGroups) {
            if ($group.sAMAccountName.EndsWith("_RW")) { $rwGroupCache[$group.sAMAccountName] = $group }
            elseif ($group.sAMAccountName.EndsWith("_RO")) { $roGroupCache[$group.sAMAccountName] = $group }
        }
    }
    Write-Host "$($rwGroupCache.Count) _RW groups and $($roGroupCache.Count) _RO groups cached."

    #============================================================================
    # PHASE 2: PER-USER PROCESSING AND DATA ENRICHMENT
    #============================================================================
    Write-Host "Phase 2: Starting per-user processing and data enrichment..."
    $resultsList = [System.Collections.ArrayList]::new()
    $today = (Get-Date).Date

    foreach ($user in $adUsers) {
        Write-Progress -Activity "Processing Users" -Status "Processing $($user.sAMAccountName)" -PercentComplete (($resultsList.Count / $adUsers.Count) * 100)

        $reportObject = [PSCustomObject]@{
            sAMAccountName         = $user.sAMAccountName; AccountType = 'Interactive'; ManagerSAM = ''; ManagerName = ''; ManagerEmail = ''; ManagerDepartment = ''; WhenCreated = $user.whenCreated
            PasswordLastSet        = 'Never'; DaysSincePasswordReset = 'N/A'; InScopeGroups = ''; PasswordPolicyDays = 'N/A'; PasswordExpiryDate = 'N/A'; DaysUntilExpiry = 'N/A'
            RW_GroupExists         = 'No'; RO_GroupExists = 'No'; RW_GroupManagerSAM = ''; RO_GroupManagerSAM = ''; ManagerInRW_Group = 'N/A'; ManagerInRO_Group = 'N/A'
            RW_ManagerMatch        = 'No'; RO_ManagerMatch = 'No'
        }
        
        $passwordLastSetDate = if ($user.pwdLastSet -gt 0) { [datetime]::FromFileTime($user.pwdLastSet) } else { $null }
        if ($passwordLastSetDate) { $reportObject.PasswordLastSet = $passwordLastSetDate; $reportObject.DaysSincePasswordReset = ($today - $passwordLastSetDate.Date).Days }
        if ($nonInteractiveUserCache.ContainsKey($user.DistinguishedName)) { $reportObject.AccountType = 'Non-Interactive' }
        
        $managerUser = $null
        if (-not [string]::IsNullOrEmpty($user.manager)) {
            try {
                $managerUser = Get-ADUser -Identity $user.manager -Properties sAMAccountName, Name, EmailAddress, Department, DistinguishedName -ErrorAction Stop
                $reportObject.ManagerSAM = $managerUser.sAMAccountName; $reportObject.ManagerName = $managerUser.Name; $reportObject.ManagerEmail = $managerUser.EmailAddress; $reportObject.ManagerDepartment = $managerUser.Department
            } catch { Write-Warning "Could not resolve manager with DN '$($user.manager)' for user '$($user.sAMAccountName)'. Error: $($_.Exception.Message)" }
        }

        $userInScopeGroups = @(); $policyApplied = $false
        foreach ($groupDN in $user.memberOf) {
            if ($inScopeGroupLookup.ContainsKey($groupDN)) {
                $groupName = $inScopeGroupLookup[$groupDN]; $userInScopeGroups += $groupName
                if (-not $policyApplied -and $RotationPolicyMap.ContainsKey($groupName)) {
                    $policyDays = $RotationPolicyMap[$groupName]
                    if ($policyDays -eq -1) { $reportObject.PasswordPolicyDays = "No Rotation" }
                    else {
                        $reportObject.PasswordPolicyDays = $policyDays
                        if ($passwordLastSetDate) { $expiryDate = $passwordLastSetDate.AddDays($policyDays); $reportObject.PasswordExpiryDate = $expiryDate; $reportObject.DaysUntilExpiry = ($expiryDate.Date - $today).Days }
                    }
                    $policyApplied = $true
                }
            }
        }
        $reportObject.InScopeGroups = $userInScopeGroups -join ", "

        $rwGroupName = "$($user.sAMAccountName)_RW"
        if ($rwGroupCache.ContainsKey($rwGroupName)) {
            $reportObject.RW_GroupExists = 'Yes'; $reportObject.ManagerInRW_Group = 'No'; $rwGroup = $rwGroupCache[$rwGroupName]
            if ($rwGroup.managedBy) { try { $reportObject.RW_GroupManagerSAM = (Get-ADUser -Identity $rwGroup.managedBy -Properties sAMAccountName -EA Stop).sAMAccountName } catch {} }
            if ($managerUser -and $rwGroup.member -contains $managerUser.DistinguishedName) { $reportObject.ManagerInRW_Group = 'Yes' }
        }

        $roGroupName = "$($user.sAMAccountName)_RO"
        if ($roGroupCache.ContainsKey($roGroupName)) {
            $reportObject.RO_GroupExists = 'Yes'; $reportObject.ManagerInRO_Group = 'No'; $roGroup = $roGroupCache[$roGroupName]
            if ($roGroup.managedBy) { try { $reportObject.RO_GroupManagerSAM = (Get-ADUser -Identity $roGroup.managedBy -Properties sAMAccountName -EA Stop).sAMAccountName } catch {} }
            if ($managerUser -and $roGroup.member -contains $managerUser.DistinguishedName) { $reportObject.ManagerInRO_Group = 'Yes' }
        }

        if (($reportObject.ManagerSAM -ne '') -and ($reportObject.RW_GroupManagerSAM -ne '') -and ($reportObject.ManagerSAM.Trim() -eq $reportObject.RW_GroupManagerSAM.Trim())) { $reportObject.RW_ManagerMatch = 'Yes' }
        if (($reportObject.ManagerSAM -ne '') -and ($reportObject.RO_GroupManagerSAM -ne '') -and ($reportObject.ManagerSAM.Trim() -eq $reportObject.RO_GroupManagerSAM.Trim())) { $reportObject.RO_ManagerMatch = 'Yes' }

        [void]$resultsList.Add($reportObject)
    }

    #============================================================================
    # EXPORT RESULTS
    #============================================================================
    Write-Host "`nProcessing complete. Exporting $($resultsList.Count) records to CSV..."
    if ($resultsList.Count -gt 0) {
        $resultsList | Export-Csv -Path $OutputPath -NoTypeInformation -Encoding UTF8
        Write-Host "Successfully exported report to: $OutputPath"
    } else { Write-Warning "No data was generated to export." }

}
catch {
    $errorMessage = "A fatal error occurred: $($_.Exception.Message)"
    Write-Error $errorMessage
}
finally {
    Write-Host "Script execution finished. Stopping transcript."
    Stop-Transcript
}
