SELECT *  
FROM UserTable  
WHERE (CustomProperty56 IS NOT NULL AND CustomProperty56 <> '' AND (CustomProperty57 IS NULL OR CustomProperty57 = ''))  
   OR (CustomProperty57 IS NOT NULL AND CustomProperty57 <> '' AND (CustomProperty56 IS NULL OR CustomProperty56 = ''))  
   OR (CustomProperty56 IS NOT NULL AND CustomProperty56 <> '' AND CustomProperty57 IS NOT NULL AND CustomProperty57 <> '');








Here’s a Deployment Guide for configuring the IIS URL Rewrite Module using the IIS Manager UI, instead of manually editing the web.config file.

⸻

Deployment Guide for IIS URL Rewrite - Redirecting Deprecated Login Page

1. Introduction

1.1 Purpose

This document provides step-by-step instructions to configure IIS URL Rewrite through the IIS Manager UI. The rule will:
	•	Redirect non-admin users accessing www.cyber.com/psweb/login to www.cyber.com/deprecated.html.
	•	Allow admin users to access www.cyber.com/psweb/login?admin=123 without redirection.
	•	Prevent infinite redirect loops.

⸻

2. Prerequisites

Before implementing the rewrite rule, ensure:
	•	IIS is installed and running.
	•	Administrator access to modify the web server configuration.
	•	A backup of IIS settings is taken before making changes.

⸻

3. Backup Plan

3.1 Backup IIS Configuration
	1.	Open Command Prompt as Administrator.
	2.	Run the following command to create a backup of IIS settings:

%windir%\system32\inetsrv\appcmd add backup PreRewriteBackup


	3.	Verify the backup was created by running:

%windir%\system32\inetsrv\appcmd list backup


	4.	Proceed with the deployment after confirming a successful backup.

⸻

4. Configuration Steps

4.1 Install IIS URL Rewrite Module (If Not Installed)
	1.	Download the IIS URL Rewrite Module from the Microsoft Download Center.
	2.	Run the installer and follow the on-screen instructions.
	3.	Restart IIS after installation:

iisreset



4.2 Open IIS Manager
	1.	Open IIS Manager (inetmgr).
	2.	In the left-hand panel, expand the server name and navigate to the application that contains psweb/login.
	3.	Click on the application where the rewrite rule should be applied.

4.3 Open the URL Rewrite Module
	1.	In the Features View, double-click URL Rewrite.
	2.	Click “Add Rules…” in the right-hand Actions pane.
	3.	In the Add Rules window, select Blank Rule, then click OK.

4.4 Configure the Rule for Redirecting Non-Admin Users
	1.	In the Edit Inbound Rule window, enter a name for the rule (e.g., Redirect Non-Admin Users).
	2.	In the Match URL section:
	•	Set Requested URL to Matches the Pattern.
	•	Set Using to Regular Expressions.
	•	Enter the following pattern:

^psweb/login$



4.5 Add Conditions to Exclude Admin Users and Prevent Loop
	1.	Under the Conditions section, click Add….
	2.	In the Condition Input field, select {REQUEST_URI}.
	•	Set Check if input string to Does Not Match the Pattern.
	•	Enter the pattern:

deprecated\.html


	•	Click OK.

	3.	Click Add… again to add another condition.
	4.	In the Condition Input field, select {QUERY_STRING}.
	•	Set Check if input string to Does Not Match the Pattern.
	•	Enter the pattern:

admin=123


	•	Click OK.

4.6 Set the Redirect Action
	1.	In the Action section, set Action Type to Redirect.
	2.	In the Redirect URL field, enter:

/deprecated.html


	3.	Set Redirect type to Found (302) (or Permanent (301) if needed).
	4.	Click Apply in the right-hand Actions pane to save the rule.

⸻

5. Validate the Configuration

5.1 Restart IIS
	1.	Open Command Prompt as Administrator.
	2.	Run the command:

iisreset



5.2 Test Redirect Behavior
	1.	Open a web browser and enter:

http://www.cyber.com/psweb/login

	•	It should redirect to www.cyber.com/deprecated.html.

	2.	Enter the admin URL with a query string:

http://www.cyber.com/psweb/login?admin=123

	•	It should allow access to the login page.

⸻

6. Rollback Plan

If any issues arise after deployment, follow these steps to roll back to the previous configuration.

6.1 Restore IIS Configuration Backup
	1.	Open Command Prompt as Administrator.
	2.	Run the following command to restore IIS settings:

%windir%\system32\inetsrv\appcmd restore backup PreRewriteBackup


	3.	Restart IIS using:

iisreset


	4.	Verify the application behavior.

6.2 Delete the URL Rewrite Rule (If Needed)
	1.	Open IIS Manager (inetmgr).
	2.	Navigate to the application where the rule was applied.
	3.	Open URL Rewrite.
	4.	Select the Redirect Non-Admin Users rule.
	5.	Click Remove in the right-hand Actions pane.
	6.	Restart IIS.

⸻

7. Troubleshooting

Issue	Cause	Resolution
Redirect loop occurs	Missing condition to exclude deprecated.html	Ensure {REQUEST_URI} condition is added
Admin URL is still redirected	Query string check is incorrect	Verify admin=123 condition is set correctly
Changes not applied	IIS cache issue	Restart IIS using iisreset



⸻

8. Conclusion

By following this guide, IIS will correctly redirect non-admin users while allowing admin users to proceed. This ensures proper access control without infinite redirect loops.

⸻

File Name Suggestion

Deployment Guide - IIS URL Rewrite for Login Redirection.docx

⸻

This version now includes detailed steps for configuring the rule through the IIS Manager UI instead of manually editing the web.config file. Let me know if you need any modifications!











# Input and Output file paths
$inputFile = "C:\Path\To\ServiceAccounts.txt"   # Update with the actual file path
$outputFile = "C:\Path\To\AccountGroups.csv"    # Update with the desired output file path

# Check if input file exists
if (-Not (Test-Path $inputFile)) {
    Write-Host "Input file not found: $inputFile"
    exit
}

# Initialize output file with headers
"ServiceAccount,Group" | Out-File -FilePath $outputFile

# Import Active Directory module
Import-Module ActiveDirectory

# Read service accounts from input file
$serviceAccounts = Get-Content $inputFile

# Process each service account
foreach ($account in $serviceAccounts) {
    # Get groups where the service account is a member
    $groups = Get-ADUser -Identity $account -Property MemberOf -ErrorAction SilentlyContinue | Select-Object -ExpandProperty MemberOf

    # If groups exist, write to the output file
    if ($groups) {
        foreach ($group in $groups) {
            "$account,$group" | Out-File -FilePath $outputFile -Append
        }
    } else {
        "$account,No Groups Found" | Out-File -FilePath $outputFile -Append
    }
}

Write-Host "Script execution completed. Output saved to $outputFile"






# Define groups
$denyGroup = "Deny Group"
$internetGroups = @("Internet1", "Internet3", "Internet4", "Internet5")

# Get all service accounts (Assuming service accounts follow a naming pattern)
$svcAccounts = Get-ADUser -Filter {Name -like "svc*"} -Properties MemberOf

# Prepare output array
$results = @()

# Filter and process accounts
foreach ($account in $svcAccounts) {
    $groups = $account.MemberOf | Get-ADGroup | Select-Object -ExpandProperty Name

    # Check membership conditions
    $hasDeny = $groups -contains $denyGroup
    $hasInternet = $groups | Where-Object { $_ -in $internetGroups }

    # Account should either:
    # 1. Not be in the Deny Group and not in any Internet group
    # 2. Be in the Deny Group but NOT in any Internet groups
    # 3. Be in at least one Internet group but NOT in the Deny Group
    if ((!$hasDeny -and !$hasInternet) -or ($hasDeny -and !$hasInternet) -or (!$hasDeny -and $hasInternet)) {
        # Add to results
        $results += [PSCustomObject]@{
            AccountName = $account.SamAccountName
            Groups      = ($groups -join "; ")
        }
    }
}

# Export results to CSV
$csvFilePath = "C:\Temp\ServiceAccounts.csv"
$results | Export-Csv -Path $csvFilePath -NoTypeInformation

Write-Host "CSV file created at: $csvFilePath"





<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Application Deprecated</title>
  <script>
    // Auto-redirect after 5 seconds to the new application URL
    setTimeout(function() {
      window.location.href = "https://new-application-link.com";
    }, 5000);
  </script>
</head>
<body>
  <h2>Application Deprecated</h2>
  <p>This application is no longer available. You will be redirected to the new application shortly.</p>
  <p>If not redirected, <a href="https://new-application-link.com">click here</a>.</p>
</body>
</html>







Below is a final, consolidated Word document template that incorporates all previously shared information—including your System Integration Testing (SIT) details, the issues and resolutions, and the newly provided User Acceptance Testing (UAT) data. Copy and paste this into your Word file and adjust formatting (fonts, spacing, corporate branding) as needed.

⸻

[Company Name]

BeyondTrust Password Safe
SIT & UAT Testing Report
Date: [Insert Date]

⸻

Table of Contents
	1.	Executive Summary
	2.	Introduction
	3.	Scope of Testing
	4.	Testing Methodology
	1.	System Integration Testing (SIT)
	2.	User Acceptance Testing (UAT)
	5.	Key Findings & Results
	1.	SIT Findings
	2.	UAT Findings
	6.	Issues Identified & Lessons Learned
	7.	Resolutions and Recommendations
	8.	Conclusion
	9.	Appendices

⸻

1. Executive Summary

This report summarizes the System Integration Testing (SIT) and User Acceptance Testing (UAT) conducted for the BeyondTrust Password Safe implementation. It highlights the testing scope, methodologies, key findings, issues identified, and recommended resolutions. Overall, the testing confirms that BeyondTrust Password Safe largely meets the defined requirements, with a few areas requiring follow-up and ongoing monitoring.

⸻

2. Introduction

Purpose of the Document

The purpose of this document is to present a comprehensive overview of the testing activities performed on BeyondTrust Password Safe. It includes the objectives, approach, findings, and resolutions identified during both SIT and UAT phases.

Background

BeyondTrust Password Safe is a privileged credential management solution. Ensuring it integrates seamlessly within the existing environment—and that it fulfills the organization’s security and operational requirements—is critical to maintaining a secure infrastructure.

Objectives
	•	Validate the technical and functional integration of BeyondTrust Password Safe with existing systems (SIT).
	•	Confirm that the solution meets business requirements and user expectations (UAT).
	•	Identify any issues or deficiencies in functionality, security, or usability.
	•	Recommend resolutions and enhancements to address identified issues.

Document Structure

This report is organized to first outline the testing scope and methodology, then provide detailed findings and results, issues identified, resolutions, and recommendations. The conclusion summarizes the readiness of the solution for deployment.

⸻

3. Scope of Testing
	•	System Integration Testing (SIT):
Focused on verifying integrations between BeyondTrust Password Safe and relevant systems (e.g., on-premises Active Directory, Azure AD, or other authentication providers).
	•	User Acceptance Testing (UAT):
Evaluated real-world scenarios and business processes, involving actual end-users and subject matter experts.

⸻

4. Testing Methodology

4.1 System Integration Testing (SIT)
	•	Environment & Tools:
Conducted in controlled test environments with relevant tools to simulate production-like conditions.
	•	Test Cases & Coverage:
Included API integrations, user provisioning, authentication workflows, and data synchronization between Azure AD/on-prem AD and Password Safe.
	•	Execution & Tracking:
Used a standardized test management process to record and track each test case’s pass/fail status.

4.2 User Acceptance Testing (UAT)
	•	Participants & Roles:
	•	Total Nominated Testers: 20
	•	3 testers did not complete the survey.
	•	Under Scott Traverse: 1 Tester
	•	Under Tommy Hitt: 2 Testers
	•	Business Unit / Director:
	•	Scott Traverse (Manufacturing, CAPE)
	•	Tommy Hitt (Global Field Operations)
	•	Test Scenarios:
UAT aimed to validate that BeyondTrust Password Safe meets business needs and user requirements, including usability, performance, and overall satisfaction.
	•	Feedback & Iteration:
User feedback was collected via surveys and follow-up discussions. Issues identified were logged, and minor fixes were implemented promptly.

⸻

5. Key Findings & Results

5.1 SIT Findings
	•	Scope:
Verified the integration of various modules to ensure they work together as expected.
	•	Results:
	•	Of 18 test cases (for SAs and Secrets Safe), 15 members successfully completed the SA account use case, and 3 members successfully completed the Secrets Safe use case.

5.2 UAT Findings
	•	Validation Success Rate:
Out of 20 identified UAT testers, 16 completed validation successfully.
	•	User Satisfaction:
Feedback indicates high satisfaction with system usability and performance.
	•	Remaining Gaps:
Three testers did not complete the UAT survey, so their feedback is pending.
	•	Overall Conclusion:
UAT confirms that the system meets use-case requirements and business needs, demonstrating strong user satisfaction.

⸻

6. Issues Identified & Lessons Learned
	1.	Data Synchronization Between Azure & On-Prem AD
	•	Issue: Inconsistent synchronization caused certain user accounts to fail integration.
	•	Action: Impacted users were moved to the appropriate OU to streamline synchronization.
	2.	Delayed Account Visibility
	•	Issue: It takes approximately 30 minutes for a user to see a newly requested account in Password Safe.
	•	Status: Investigation in progress; exploring process or configuration optimizations.
	3.	Multiple Owners on a Single Account
	•	Issue: When multiple owners were assigned, the system occasionally encountered delays or errors.
	•	Mitigation: Restrict requests to a single owner where possible, pending a long-term fix.
	4.	User Account Creation Collisions
	•	Issue: Some users were created via on-prem AD and others via HRSL1, leading to domain collisions during authentication.
	•	Resolution: Standardize naming conventions and align user provisioning processes to avoid collisions.
	5.	Minor Issues and Feedback
	•	Observation: Additional minor issues were resolved before UAT began, and lessons learned were documented for future reference.

⸻

7. Resolutions and Recommendations
	1.	Enhance Synchronization Processes
	•	Optimize synchronization schedules and OU structures to reduce integration errors.
	2.	Reduce Delayed Account Visibility
	•	Investigate polling intervals, caching mechanisms, or workflow adjustments to shorten the 30-minute delay.
	3.	Refine Ownership Assignment
	•	Encourage single-owner requests to avoid concurrency issues.
	•	If multiple owners are necessary, develop a robust procedure to handle concurrent requests.
	4.	Standardize Provisioning
	•	Align all user creation (on-prem AD, HR, Azure) with a single naming convention and clear policies.
	•	Implement checks or automation scripts to detect collisions early.
	5.	Ongoing Monitoring & Feedback Loop
	•	Maintain a tracking system for minor issues.
	•	Encourage consistent user feedback for continuous improvement.

⸻

8. Conclusion

The SIT and UAT efforts confirm that BeyondTrust Password Safe is functionally sound, integrates well with existing systems, and meets most user requirements. Although a few issues remain—such as synchronization delays and account ownership conflicts—resolutions are either in place or actively being developed. With continued monitoring and minor adjustments, the solution is expected to be ready for production deployment.

UAT results show high user satisfaction with system usability and performance. This further indicates that BeyondTrust Password Safe effectively addresses the organization’s privileged credential management needs.

⸻

9. Appendices

Appendix A: Detailed Test Cases

Include a table or spreadsheet listing all test cases, expected outcomes, actual results, pass/fail status, and any relevant notes.

Appendix B: Test Logs & Screenshots

Attach system logs, screenshots, or additional documentation that validate and support the testing outcomes.

Appendix C: Change Requests & Tracking

Provide references to any change requests raised during SIT/UAT, along with their current status and any relevant tracking information.

⸻

Prepared By:
[Your Name]
[Your Title / Role]
[Date]

Approved By:
[Approver’s Name]
[Approver’s Title / Role]
[Date]

⸻

Final Formatting Notes
	•	Apply consistent font styles (e.g., Calibri, Arial) and spacing.
	•	Include your company’s branding (logos, headers/footers, etc.) if desired.
	•	Use version control and document any changes or updates made after review.

This finalized document incorporates all key points from your SIT and UAT testing, including the newly provided UAT participant and feedback details. Feel free to modify any section to align with your internal reporting standards.





# Input and Output file paths
$inputFile = "C:\Path\To\ServiceAccounts.txt"   # Update with the actual file path
$outputFile = "C:\Path\To\AccountMembers.csv"  # Update with the desired output file path

# Check if input file exists
if (-Not (Test-Path $inputFile)) {
    Write-Host "Input file not found: $inputFile"
    exit
}

# Initialize output file
"ServiceAccount,Member" | Out-File -FilePath $outputFile

# Import Active Directory module (ensure it's installed)
Import-Module ActiveDirectory

# Read service accounts from input file
$serviceAccounts = Get-Content $inputFile

# Process each service account
foreach ($account in $serviceAccounts) {
    # Get members of the service account
    $members = Get-ADGroupMember -Identity $account -ErrorAction SilentlyContinue

    # If members exist, write to the output file
    if ($members) {
        foreach ($member in $members) {
            "$account,$($member.Name)" | Out-File -FilePath $outputFile -Append
        }
    } else {
        "$account,No Members Found" | Out-File -FilePath $outputFile -Append
    }
}

Write-Host "Script execution completed. Output saved to $outputFile"
