# Define the path to the text file
$filePath = "C:\path\to\usernames.txt" # Replace with the actual path to your text file

# Define the value for the attribute
$hideFromAddressLists = $true # Set to $false if you want to unhide

# Define the paths for the log files
$successLogPath = "C:\path\to\success.log" # Replace with the actual path to your success log file
$failureLogPath = "C:\path\to\failure.log" # Replace with the actual path to your failure log file

# Import the Active Directory module
Import-Module ActiveDirectory

# Read the usernames from the text file
$usernames = Get-Content -Path $filePath

# Loop through each username and update the attribute
foreach ($userName in $usernames) {
    try {
        # Get the user object
        $user = Get-ADUser -Identity $userName

        # Update the msExchHideFromAddressLists attribute
        Set-ADUser -Identity $user -Replace @{msExchHideFromAddressLists=$hideFromAddressLists}

        # Log success message
        $successMessage = "[$(Get-Date)] Updated msExchHideFromAddressLists for user $userName to $hideFromAddressLists"
        Add-Content -Path $successLogPath -Value $successMessage
    } catch {
        # Log failure message
        $failureMessage = "[$(Get-Date)] Failed to update msExchHideFromAddressLists for user $userName. Error: $_"
        Add-Content -Path $failureLogPath -Value $failureMessage
    }
}

Exception Request Details

Exception Title

Vulnerability Exception Request for Outdated .NET 6 Version on PI Servers

Exception Description

The PI servers in the current environment are running an outdated version of .NET 6, which is flagged as a vulnerability. These servers are scheduled for decommissioning by the end of March 2025, as they will be replaced by new servers. The new servers will adhere to the latest security and compliance standards, including updated .NET versions.

Justification
	1.	Short-term use: The existing PI servers will be operational only until March 2025, after which they will be decommissioned.
	2.	Minimal risk: These servers are in a controlled environment with limited external exposure, minimizing the likelihood of exploitation.
	3.	Resource constraints: Upgrading the .NET version on the current servers would require significant time and effort, which would divert resources from the ongoing migration to the new servers.

Remediation Plan
	1.	Controlled environment: Ensure the servers remain isolated and maintain strict access control.
	2.	Monitoring: Continuously monitor the servers for any signs of vulnerabilities being exploited.
	3.	Replacement timeline: Ensure the decommissioning of existing servers and deployment of new PI servers with updated .NET versions is completed by March 31, 2025.
	4.	Review: Reassess the exception if the decommissioning timeline changes.

Let me know if adjustments are @⁨Udaykumar (Deloitte)⁩ @⁨~Mohanraj⁩ Have 2 questions re: Privpass:
1. What is the process to on-board local windows administrator and Linux root accounts to privpass today? How many account are managed today and for which environment?
2. ⁠are Azure and AWS seed accounts vaulted in Privpass? 

Need this information by 7am CT Monday for a meeting with the client. Pls send me response over an email. We can also have a quick call when one of you is available.





# Define domain controllers
$CorpDC = "CorpDC.domain.com"
$StageDC = "StageDC.domain.com"

# Define credentials (You may be prompted for credentials)
$CorpCred = Get-Credential -Message "Enter credentials for Corp domain"
$StageCred = Get-Credential -Message "Enter credentials for Stage domain"

# List of users from Court domain to be replicated
$CourtUsers = @("user1", "user2", "user3") # Replace with actual usernames

# Fetch user attributes including OU path from Corp domain
$CorpUsers = foreach ($User in $CourtUsers) {
    Get-ADUser -Identity $User -Server $CorpDC -Credential $CorpCred -Properties * | 
    Select-Object SamAccountName, Name, GivenName, Surname, UserPrincipalName, DisplayName, EmailAddress, Department, Title, Enabled, Description, DistinguishedName
}

# Replicate users in Stage domain with the same OU structure
foreach ($User in $CorpUsers) {
    # Extract the OU path from the Distinguished Name
    $OUPath = ($User.DistinguishedName -split ",", 2)[1]

    # Check if user already exists in Stage domain
    $ExistingUser = Get-ADUser -Filter {SamAccountName -eq $User.SamAccountName} -Server $StageDC -Credential $StageCred -ErrorAction SilentlyContinue
    
    if (-not $ExistingUser) {
        New-ADUser -SamAccountName $User.SamAccountName `
                   -Name $User.Name `
                   -GivenName $User.GivenName `
                   -Surname $User.Surname `
                   -UserPrincipalName $User.UserPrincipalName `
                   -DisplayName $User.DisplayName `
                   -EmailAddress $User.EmailAddress `
                   -Department $User.Department `
                   -Title $User.Title `
                   -Enabled $User.Enabled `
                   -Description $User.Description `
                   -Path $OUPath ` # Assigning the same OU path from Corp domain
                   -Server $StageDC `
                   -Credential $StageCred

        Write-Host "User $($User.SamAccountName) created in Stage domain under OU: $OUPath"
    } else {
        Write-Host "User $($User.SamAccountName) already exists in Stage domain, skipping..."
    }
}




# Define domain controllers
$CorpDC = "CorpDC.domain.com"
$StageDC = "StageDC.domain.com"

# Define default password for new users in Stage domain (update as needed)
$DefaultPassword = "P@ssw0rd123!" | ConvertTo-SecureString -AsPlainText -Force

# List of users from Court domain to be replicated
$CourtUsers = @("user1", "user2", "user3") # Replace with actual usernames

# Fetch user attributes including OU path, company, and manager from Corp domain
$CorpUsers = foreach ($User in $CourtUsers) {
    $CorpUser = Get-ADUser -Identity $User -Server $CorpDC -Properties * 
    $Manager = if ($CorpUser.Manager) { 
        (Get-ADUser -Identity $CorpUser.Manager -Server $CorpDC).SamAccountName 
    } else { 
        $null 
    }

    [PSCustomObject]@{
        SamAccountName   = $CorpUser.SamAccountName
        Name             = $CorpUser.Name
        GivenName        = $CorpUser.GivenName
        Surname          = $CorpUser.Surname
        UserPrincipalName= $CorpUser.UserPrincipalName
        DisplayName      = $CorpUser.DisplayName
        Department       = $CorpUser.Department
        Title            = $CorpUser.Title
        Enabled          = $CorpUser.Enabled
        Description      = $CorpUser.Description
        DistinguishedName= $CorpUser.DistinguishedName
        Company          = $CorpUser.Company
        Manager          = $Manager
    }
}

# Replicate users in Stage domain with the same OU structure, company, and manager
foreach ($User in $CorpUsers) {
    # Extract the OU path from the Distinguished Name
    $OUPath = ($User.DistinguishedName -split ",", 2)[1]

    # Check if user already exists in Stage domain
    $ExistingUser = Get-ADUser -Filter {SamAccountName -eq $User.SamAccountName} -Server $StageDC -ErrorAction SilentlyContinue
    
    if (-not $ExistingUser) {
        # Create the user in Stage domain
        New-ADUser -SamAccountName $User.SamAccountName `
                   -Name $User.Name `
                   -GivenName $User.GivenName `
                   -Surname $User.Surname `
                   -UserPrincipalName $User.UserPrincipalName `
                   -DisplayName $User.DisplayName `
                   -Department $User.Department `
                   -Title $User.Title `
                   -Enabled $User.Enabled `
                   -Description $User.Description `
                   -Company $User.Company `
                   -Path $OUPath ` # Assigning the same OU path from Corp domain
                   -Server $StageDC `
                   -AccountPassword $DefaultPassword `
                   -PasswordNeverExpires $true `
                   -ChangePasswordAtLogon $true

        # Set Manager if available
        if ($User.Manager) {
            Set-ADUser -Identity $User.SamAccountName -Manager $User.Manager -Server $StageDC
        }

        Write-Host "User $($User.SamAccountName) created in Stage domain under OU: $OUPath with default password, company, and manager."
    } else {
        Write-Host "User $($User.SamAccountName) already exists in Stage domain, skipping..."
    }
}




# Define domain controllers
$CorpDC = "CorpDC.domain.com"
$StageDC = "StageDC.domain.com"

# Define default password for new users in Stage domain (update as needed)
$DefaultPassword = "P@ssw0rd123!" | ConvertTo-SecureString -AsPlainText -Force

# List of users (SamAccountName) from Court domain to be replicated
$CourtUsers = @("sam1", "sam2", "sam3") # Replace with actual SamAccountNames

# Fetch user attributes including OU path, company, and manager from Corp domain
$CorpUsers = foreach ($Sam in $CourtUsers) {
    $CorpUser = Get-ADUser -Identity $Sam -Server $CorpDC -Properties * 
    $Manager = if ($CorpUser.Manager) { 
        (Get-ADUser -Identity $CorpUser.Manager -Server $CorpDC).SamAccountName 
    } else { 
        $null 
    }

    [PSCustomObject]@{
        SamAccountName   = $CorpUser.SamAccountName
        Name             = $CorpUser.Name
        GivenName        = $CorpUser.GivenName
        Surname          = $CorpUser.Surname
        UserPrincipalName= $CorpUser.UserPrincipalName
        DisplayName      = $CorpUser.DisplayName
        Department       = $CorpUser.Department
        Title            = $CorpUser.Title
        Enabled          = $CorpUser.Enabled
        Description      = $CorpUser.Description
        DistinguishedName= $CorpUser.DistinguishedName
        Company          = $CorpUser.Company
        Manager          = $Manager
    }
}

# Replicate users in Stage domain with the same OU structure, company, and manager
foreach ($User in $CorpUsers) {
    # Extract the OU path from the Distinguished Name
    $OUPath = ($User.DistinguishedName -split ",", 2)[1]

    # Check if user already exists in Stage domain
    $ExistingUser = Get-ADUser -Filter {SamAccountName -eq $User.SamAccountName} -Server $StageDC -ErrorAction SilentlyContinue
    
    if (-not $ExistingUser) {
        # Create the user in Stage domain
        New-ADUser -SamAccountName $User.SamAccountName `
                   -Name $User.Name `
                   -GivenName $User.GivenName `
                   -Surname $User.Surname `
                   -UserPrincipalName $User.UserPrincipalName `
                   -DisplayName $User.DisplayName `
                   -Department $User.Department `
                   -Title $User.Title `
                   -Enabled $User.Enabled `
                   -Description $User.Description `
                   -Company $User.Company `
                   -Path $OUPath ` # Assigning the same OU path from Corp domain
                   -Server $StageDC `
                   -AccountPassword $DefaultPassword `
                   -PasswordNeverExpires $true `
                   -ChangePasswordAtLogon $true

        # Set Manager if available
        if ($User.Manager) {
            Set-ADUser -Identity $User.SamAccountName -Manager $User.Manager -Server $StageDC
        }

        Write-Host "User $($User.SamAccountName) created in Stage domain under OU: $OUPath with default password, company, and manager."
    } else {
        Write-Host "User $($User.SamAccountName) already exists in Stage domain, 





# Define Corp domain controller
$CorpDC = "CorpDC.domain.com"

# List of SamAccountNames to fetch (replace with actual SamAccountNames)
$CourtUsers = @("sam1", "sam2", "sam3")

# Output CSV file
$CSVPath = "C:\Temp\CorpUsers.csv"

# Fetch user attributes and export to CSV
$CorpUsers = foreach ($Sam in $CourtUsers) {
    $CorpUser = Get-ADUser -Identity $Sam -Server $CorpDC -Properties * 
    $Manager = if ($CorpUser.Manager) { 
        (Get-ADUser -Identity $CorpUser.Manager -Server $CorpDC).SamAccountName 
    } else { 
        $null 
    }

    [PSCustomObject]@{
        SamAccountName    = $CorpUser.SamAccountName
        Name              = $CorpUser.Name
        GivenName         = $CorpUser.GivenName
        Surname           = $CorpUser.Surname
        UserPrincipalName = $CorpUser.UserPrincipalName
        DisplayName       = $CorpUser.DisplayName
        Department        = $CorpUser.Department
        Title             = $CorpUser.Title
        Enabled           = $CorpUser.Enabled
        Description       = $CorpUser.Description
        DistinguishedName = $CorpUser.DistinguishedName
        Company           = $CorpUser.Company
        Manager           = $Manager
    }
}

# Export to CSV
$CorpUsers | Export-Csv -Path $CSVPath -NoTypeInformation

Write-Host "Exported $(($CorpUsers).Count) users to $CSVPath"





-----------------


# List of SamAccountNames to fetch (replace with actual SamAccountNames)
$CourtUsers = @("sam1", "sam2", "sam3")

# Output CSV file
$CSVPath = "C:\Temp\CorpUsers.csv"

# Fetch user attributes and export to CSV
$CorpUsers = foreach ($Sam in $CourtUsers) {
    $CorpUser = Get-ADUser -Identity $Sam -Properties * 
    $Manager = if ($CorpUser.Manager) { 
        (Get-ADUser -Identity $CorpUser.Manager).SamAccountName 
    } else { 
        $null 
    }

    [PSCustomObject]@{
        SamAccountName    = $CorpUser.SamAccountName
        Name              = $CorpUser.Name
        GivenName         = $CorpUser.GivenName
        Surname           = $CorpUser.Surname
        UserPrincipalName = $CorpUser.UserPrincipalName
        DisplayName       = $CorpUser.DisplayName
        Department        = $CorpUser.Department
        Title             = $CorpUser.Title
        Enabled           = $CorpUser.Enabled
        Description       = $CorpUser.Description
        DistinguishedName = $CorpUser.DistinguishedName
        Company           = $CorpUser.Company
        Manager           = $Manager
    }
}

# Export to CSV
$CorpUsers | Export-Csv -Path $CSVPath -NoTypeInformation

Write-Host "Exported $(($CorpUsers).Count) users to $CSVPath"



# Default password for new users
$DefaultPassword = "P@ssw0rd123!" | ConvertTo-SecureString -AsPlainText -Force

# CSV file path (same as exported by the first script)
$CSVPath = "C:\Temp\CorpUsers.csv"

# Import users from CSV
$Users = Import-Csv -Path $CSVPath

# Create users in Stage domain
foreach ($User in $Users) {
    # Extract the OU path from the Distinguished Name
    $OUPath = ($User.DistinguishedName -split ",", 2)[1]

    # Check if user already exists in Stage domain
    $ExistingUser = Get-ADUser -Filter {SamAccountName -eq $User.SamAccountName} -ErrorAction SilentlyContinue
    
    if (-not $ExistingUser) {
        # Create the user in Stage domain
        New-ADUser -SamAccountName $User.SamAccountName `
                   -Name $User.Name `
                   -GivenName $User.GivenName `
                   -Surname $User.Surname `
                   -UserPrincipalName $User.UserPrincipalName `
                   -DisplayName $User.DisplayName `
                   -Department $User.Department `
                   -Title $User.Title `
                   -Enabled $User.Enabled `
                   -Description $User.Description `
                   -Company $User.Company `
                   -Path $OUPath ` # Assigning the same OU path from Corp domain
                   -AccountPassword $DefaultPassword `
                   -PasswordNeverExpires $true `
                   -ChangePasswordAtLogon $true

        # Set Manager if available
        if ($User.Manager) {
            Set-ADUser -Identity $User.SamAccountName -Manager $User.Manager
        }

        Write-Host "User $($User.SamAccountName) created in Stage domain under OU: $OUPath with specified password."
    } else {
        Write-Host "User $($User.SamAccountName) already exists in Stage domain, skipping..."
    }
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Migration Notice</title>
    <style>
        .banner {
            background-color: #ffcccc;
            color: red;
            font-size: 24px;
            font-weight: bold;
            text-align: center;
            padding: 20px;
            border: 2px solid red;
        }
        .banner a {
            color: red;
            text-decoration: underline;
        }
    </style>
</head>
<body>

    <div class="banner">
        Important Notice: We are migrating to a new tool.  
        Please proceed with the migration by following this link:  
        <a href="[Insert Link Here]" target="_blank">Click Here</a>
    </div>

</body>
</html>
