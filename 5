<#
.SYNOPSIS
    Generates a comprehensive report on specified Active Directory users, including password expiry details.
.DESCRIPTION
    This script retrieves a list of Active Directory users based on a configurable LDAP filter.
    For each user, it reports on their sAMAccountName, account type, manager details, and creation date.
    It automatically detects membership in password rotation groups (e.g., '90dayrotation', 'norotation')
    to calculate and report on the password policy, the password's expiry date, and the days remaining
    until expiry. It also verifies the existence of corresponding _RW and _RO groups and their managers.

.NOTES
    Version: 2.0 (Feature Update)
    Author: Senior PowerShell and Active Directory Automation Specialist
    Prerequisites: Active Directory module for Windows PowerShell (RSAT-AD-PowerShell).
    Execution Policy: The script must be run under an execution policy that allows script execution (e.g., RemoteSigned).
    Permissions: The executing account needs read permissions for user and group objects in Active Directory.
#>

#================================================================================
# SCRIPT EXECUTION WRAPPER WITH LOGGING AND ERROR HANDLING
#================================================================================

Try {
    #----------------------------------------------------------------------------
    # CONFIGURATION
    #----------------------------------------------------------------------------
    $OutputPath = "C:\Temp\AD_User_Group_Report.csv"
    $LogPath = "C:\Temp\Logs"
    $LDAPFilter = "(&(objectCategory=person)(objectClass=user)(!(userAccountControl:1.2.840.113556.1.4.803:=2))(|(company=*Resource*)(company=Resource-Service))(!(company=Resource-Admin)))"
    
    # ✨ NEW: Define the password rotation policy groups.
    $RotationGroupNames = @("norotation", "30dayrotation", "90dayrotation", "180dayrotation", "365dayrotation")

    # ✨ NEW: Map group names to the number of days in their policy. -1 signifies no rotation.
    $RotationPolicyMap = @{
        'norotation'     = -1
        '30dayrotation'  = 30
        '90dayrotation'  = 90
        '180dayrotation' = 180
        '365dayrotation' = 365
    }

    $NonInteractiveGroupName = "deny_interactvie"

    #----------------------------------------------------------------------------
    # INITIALIZATION
    #----------------------------------------------------------------------------
    if (-not (Test-Path -Path $LogPath -PathType Container)) {
        Write-Verbose "Log directory not found. Creating it at: $LogPath"
        New-Item -Path $LogPath -ItemType Directory -Force | Out-Null
    }
    $Timestamp = Get-Date -Format 'yyyyMMdd-HHmmss'
    $TranscriptPath = Join-Path -Path $LogPath -ChildPath "AD_User_Report_$Timestamp.log"
    Start-Transcript -Path $TranscriptPath
    Write-Host "Script execution started. Logging to: $TranscriptPath"

    if (-not (Get-Module -Name ActiveDirectory -ListAvailable)) {
        throw "The Active Directory module for Windows PowerShell is not installed. Please install RSAT-AD-PowerShell."
    }

    #============================================================================
    # PHASE 1: BULK DATA ACQUISITION AND CACHING
    #============================================================================
    Write-Host "Phase 1: Starting bulk data acquisition from Active Directory..."

    # 1.1: Get the primary list of users
    $adUsers = Get-ADUser -LDAPFilter $LDAPFilter -Properties manager, whenCreated, pwdLastSet, memberOf, company, DistinguishedName -ErrorAction Stop
    if ($null -eq $adUsers) { throw "No users found matching the specified LDAP filter. Halting execution." }
    Write-Host "$($adUsers.Count) users retrieved for processing."

    # 1.2: Pre-cache password rotation policy groups
    Write-Verbose "Caching password rotation policy group information..."
    $rotationGroupLookup = @{}
    if ($RotationGroupNames.Count -gt 0) {
        $groupFilter = '(|' + ($RotationGroupNames | ForEach-Object { "(sAMAccountName=$_)" }) + ')'
        Get-ADGroup -LDAPFilter $groupFilter | ForEach-Object { $rotationGroupLookup[$_.DistinguishedName] = $_.sAMAccountName }
    }
    Write-Host "$($rotationGroupLookup.Count) rotation policy groups cached."
    
    # 1.3: Pre-cache members of the non-interactive group
    Write-Verbose "Caching members of the '$NonInteractiveGroupName' group..."
    $nonInteractiveUserCache = @{}
    try {
        $denyGroupMembers = Get-ADGroupMember -Identity $NonInteractiveGroupName -ErrorAction Stop
        foreach ($member in $denyGroupMembers) { $nonInteractiveUserCache[$member.DistinguishedName] = $true }
        Write-Host "$($nonInteractiveUserCache.Count) non-interactive users cached."
    }
    catch { Write-Warning "Could not find the group '$NonInteractiveGroupName'. All users will be marked as Interactive." }

    # 1.4: Pre-cache all potential _RW and _RO groups
    $potentialGroupNames = [System.Collections.Generic.List[string]]::new()
    foreach ($user in $adUsers) {
        $potentialGroupNames.Add("$($user.sAMAccountName)_RW")
        $potentialGroupNames.Add("$($user.sAMAccountName)_RO")
    }
    $rwGroupCache = @{}
    $roGroupCache = @{}
    $batchSize = 400
    for ($i = 0; $i -lt $potentialGroupNames.Count; $i += $batchSize) {
        $batch = $potentialGroupNames.GetRange($i, [System.Math]::Min($batchSize, $potentialGroupNames.Count - $i))
        $groupLDAPFilter = "(|" + ($batch | ForEach-Object { "(sAMAccountName=$_)" }) + ")"
        $foundGroups = Get-ADGroup -LDAPFilter $groupLDAPFilter -Properties managedBy, member -ErrorAction SilentlyContinue
        foreach ($group in $foundGroups) {
            if ($group.sAMAccountName.EndsWith("_RW")) { $rwGroupCache[$group.sAMAccountName] = $group }
            elseif ($group.sAMAccountName.EndsWith("_RO")) { $roGroupCache[$group.sAMAccountName] = $group }
        }
    }
    Write-Host "$($rwGroupCache.Count) _RW groups and $($roGroupCache.Count) _RO groups cached."

    #============================================================================
    # PHASE 2: PER-USER PROCESSING AND DATA ENRICHMENT
    #============================================================================
    Write-Host "Phase 2: Starting per-user processing and data enrichment..."
    $resultsList = [System.Collections.ArrayList]::new()
    $today = (Get-Date).Date

    foreach ($user in $adUsers) {
        Write-Progress -Activity "Processing Users" -Status "Processing $($user.sAMAccountName)" -PercentComplete (($resultsList.Count / $adUsers.Count) * 100)

        # ✨ NEW: Added password policy columns and removed InScopeGroups
        $reportObject = [PSCustomObject]@{
            sAMAccountName         = $user.sAMAccountName
            AccountType            = 'Interactive'
            ManagerSAM             = ''
            ManagerName            = ''
            ManagerEmail           = ''
            ManagerDepartment      = ''
            WhenCreated            = $user.whenCreated
            PasswordLastSet        = 'Never'
            DaysSincePasswordReset = 'N/A'
            PasswordPolicyDays     = 'N/A'
            PasswordExpiryDate     = 'N/A'
            DaysUntilExpiry        = 'N/A'
            RW_GroupExists         = 'No'
            RO_GroupExists         = 'No'
            RW_GroupManagerSAM     = ''
            RO_GroupManagerSAM     = ''
            ManagerInRW_Group      = 'N/A'
            ManagerInRO_Group      = 'N/A'
            RW_ManagerMatch        = 'No'
            RO_ManagerMatch        = 'No'
        }
        
        $passwordLastSetDate = if ($user.pwdLastSet -gt 0) { [datetime]::FromFileTime($user.pwdLastSet) } else { $null }
        if ($passwordLastSetDate) {
            $reportObject.PasswordLastSet = $passwordLastSetDate
            $reportObject.DaysSincePasswordReset = ($today - $passwordLastSetDate.Date).Days
        }

        if ($nonInteractiveUserCache.ContainsKey($user.DistinguishedName)) {
            $reportObject.AccountType = 'Non-Interactive'
        }
        
        $managerUser = $null
        if (-not [string]::IsNullOrEmpty($user.manager)) {
            try {
                $managerUser = Get-ADUser -Identity $user.manager -Properties sAMAccountName, Name, EmailAddress, Department, DistinguishedName -ErrorAction Stop
                $reportObject.ManagerSAM = $managerUser.sAMAccountName; $reportObject.ManagerName = $managerUser.Name; $reportObject.ManagerEmail = $managerUser.EmailAddress; $reportObject.ManagerDepartment = $managerUser.Department
            } catch { Write-Warning "Could not resolve manager with DN '$($user.manager)' for user '$($user.sAMAccountName)'. Error: $($_.Exception.Message)" }
        }

        # ✨ NEW: Determine password policy and calculate expiry
        foreach ($groupDN in $user.memberOf) {
            if ($rotationGroupLookup.ContainsKey($groupDN)) {
                $policyGroupName = $rotationGroupLookup[$groupDN]
                $policyDays = $RotationPolicyMap[$policyGroupName]
                
                if ($policyDays -eq -1) {
                    $reportObject.PasswordPolicyDays = "No Rotation"
                } else {
                    $reportObject.PasswordPolicyDays = $policyDays
                    if ($passwordLastSetDate) {
                        $expiryDate = $passwordLastSetDate.AddDays($policyDays)
                        $reportObject.PasswordExpiryDate = $expiryDate
                        $reportObject.DaysUntilExpiry = ($expiryDate.Date - $today).Days
                    }
                }
                break # Assume user is in only one policy group and stop checking
            }
        }

        $rwGroupName = "$($user.sAMAccountName)_RW"
        if ($rwGroupCache.ContainsKey($rwGroupName)) {
            $reportObject.RW_GroupExists = 'Yes'; $reportObject.ManagerInRW_Group = 'No'
            $rwGroup = $rwGroupCache[$rwGroupName]
            if ($rwGroup.managedBy) { try { $reportObject.RW_GroupManagerSAM = (Get-ADUser -Identity $rwGroup.managedBy -Properties sAMAccountName -EA Stop).sAMAccountName } catch {} }
            if ($managerUser -and $rwGroup.member -contains $managerUser.DistinguishedName) { $reportObject.ManagerInRW_Group = 'Yes' }
        }

        $roGroupName = "$($user.sAMAccountName)_RO"
        if ($roGroupCache.ContainsKey($roGroupName)) {
            $reportObject.RO_GroupExists = 'Yes'; $reportObject.ManagerInRO_Group = 'No'
            $roGroup = $roGroupCache[$roGroupName]
            if ($roGroup.managedBy) { try { $reportObject.RO_GroupManagerSAM = (Get-ADUser -Identity $roGroup.managedBy -Properties sAMAccountName -EA Stop).sAMAccountName } catch {} }
            if ($managerUser -and $roGroup.member -contains $managerUser.DistinguishedName) { $reportObject.ManagerInRO_Group = 'Yes' }
        }

        if (($reportObject.ManagerSAM -ne '') -and ($reportObject.RW_GroupManagerSAM -ne '') -and ($reportObject.ManagerSAM.Trim() -eq $reportObject.RW_GroupManagerSAM.Trim())) { $reportObject.RW_ManagerMatch = 'Yes' }
        if (($reportObject.ManagerSAM -ne '') -and ($reportObject.RO_GroupManagerSAM -ne '') -and ($reportObject.ManagerSAM.Trim() -eq $reportObject.RO_GroupManagerSAM.Trim())) { $reportObject.RO_ManagerMatch = 'Yes' }

        [void]$resultsList.Add($reportObject)
    }

    #============================================================================
    # EXPORT RESULTS
    #============================================================================
    Write-Host "`nProcessing complete. Exporting $($resultsList.Count) records to CSV..."
    if ($resultsList.Count -gt 0) {
        $resultsList | Export-Csv -Path $OutputPath -NoTypeInformation -Encoding UTF8
        Write-Host "Successfully exported report to: $OutputPath"
    } else { Write-Warning "No data was generated to export." }

}
catch {
    $errorMessage = "A fatal error occurred: $($_.Exception.Message)"
    Write-Error $errorMessage
}
finally {
    Write-Host "Script execution finished. Stopping transcript."
    Stop-Transcript
}
