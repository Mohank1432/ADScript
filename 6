# 1. SET THE PRIMARY ACCOUNT TO INVESTIGATE
$targetAccountName = 'testuser1'

# 2. SET THE LIST OF ADDITIONAL USERS TO CHECK FOR MEMBERSHIP
$memberCheckUserSAMs = @(
    'anotheruser'
    'adminuser1'
    'testuser2'
)

# 3. RUN THE QUERY BLOCK
try {
    # Get the target user and all base properties
    $user = Get-ADUser -Identity $targetAccountName -Properties manager, whenCreated, pwdLastSet, memberOf, DistinguishedName -ErrorAction Stop

    # --- Pre-fetch Associated Groups (_RW and _RO) ---
    $rwGroup = $null
    $roGroup = $null
    try { $rwGroup = Get-ADGroup -Identity "$($user.sAMAccountName)_RW" -Properties managedBy, member -ErrorAction Stop } catch {}
    try { $roGroup = Get-ADGroup -Identity "$($user.sAMAccountName)_RO" -Properties managedBy, member -ErrorAction Stop } catch {}

    # --- Define the Main Report Structure ---
    $report = [ordered]@{
        sAMAccountName         = $user.sAMAccountName
        AccountType            = 'Interactive'
        ManagerSAM             = ''
        ManagerName            = ''
        ManagerEmail           = ''
        ManagerDepartment      = ''
        WhenCreated            = $user.whenCreated
        PasswordLastSet        = 'Never'
        DaysSincePasswordReset = 'N/A'
        InScopeGroups          = ''
        RW_GroupExists         = 'No'
        RO_GroupExists         = 'No'
        RW_GroupManagerSAM     = ''
        RO_GroupManagerSAM     = ''
        ManagerInRW_Group      = 'N/A'
        ManagerInRO_Group      = 'N/A'
        RW_ManagerMatch        = 'No'
        RO_ManagerMatch        = 'No'
    }

    # --- Process User and Manager Details ---
    if ($user.memberOf -like '*CN=deny_interactvie,*') { $report.AccountType = 'Non-Interactive' }
    $inScopeGroups = $user.memberOf | Where-Object { $_ -match 'CN=(phase1|phase2|inscope),' } | ForEach-Object { ($_ -split ',')[0].Replace('CN=', '') }
    if ($inScopeGroups) { $report.InScopeGroups = $inScopeGroups -join ", " }

    if ($user.pwdLastSet -gt 0) {
        $pwdLastSetDate = [datetime]::FromFileTime($user.pwdLastSet)
        $report.PasswordLastSet = $pwdLastSetDate
        $report.DaysSincePasswordReset = ((Get-Date) - $pwdLastSetDate).Days
    }

    $manager = $null
    if ($user.manager) {
        try {
            $manager = Get-ADUser -Identity $user.manager -Properties sAMAccountName, Name, EmailAddress, Department, DistinguishedName -ErrorAction Stop
            $report.ManagerSAM = $manager.sAMAccountName
            $report.ManagerName = $manager.Name
            $report.ManagerEmail = $manager.EmailAddress
            $report.ManagerDepartment = $manager.Department
        } catch { Write-Warning "Could not resolve manager: $($user.manager)" }
    }

    # --- Process Associated Group Details ---
    if ($rwGroup) {
        $report.RW_GroupExists = 'Yes'
        $report.ManagerInRW_Group = 'No'
        if ($rwGroup.managedBy) {
            $rwManager = Get-ADUser -Identity $rwGroup.managedBy -Properties sAMAccountName -ErrorAction SilentlyContinue
            if ($rwManager) { $report.RW_GroupManagerSAM = $rwManager.sAMAccountName }
        }
        if ($manager -and $rwGroup.member -contains $manager.DistinguishedName) {
            $report.ManagerInRW_Group = 'Yes'
        }
    }

    if ($roGroup) {
        $report.RO_GroupExists = 'Yes'
        $report.ManagerInRO_Group = 'No'
        if ($roGroup.managedBy) {
            $roManager = Get-ADUser -Identity $roGroup.managedBy -Properties sAMAccountName -ErrorAction SilentlyContinue
            if ($roManager) { $report.RO_GroupManagerSAM = $roManager.sAMAccountName }
        }
        if ($manager -and $roGroup.member -contains $manager.DistinguishedName) {
            $report.ManagerInRO_Group = 'Yes'
        }
    }

    # --- âœ¨ FIX: Trim whitespace from SAM account names before comparing for a reliable match ---
    if (($report.ManagerSAM) -and ($report.RW_GroupManagerSAM) -and ($report.ManagerSAM.Trim() -eq $report.RW_GroupManagerSAM.Trim())) { $report.RW_ManagerMatch = 'Yes' }
    if (($report.ManagerSAM) -and ($report.RO_GroupManagerSAM) -and ($report.ManagerSAM.Trim() -eq $report.RO_GroupManagerSAM.Trim())) { $report.RO_ManagerMatch = 'Yes' }


    # --- Display the main report and additional checks separately ---
    Write-Host "--- Primary Account Details: $($report.sAMAccountName) ---" -ForegroundColor Green
    [PSCustomObject]$report

    if ($memberCheckUserSAMs.Count -gt 0) {
        Write-Host "`n--- Additional User Membership Check ---" -ForegroundColor Green
        $additionalChecks = foreach ($sam in $memberCheckUserSAMs) {
            $checkResult = [ordered]@{
                UserAccount = $sam
                Status      = 'Not Found'
                MemberOf_RW = 'No'
                MemberOf_RO = 'No'
            }
            try {
                $checkUser = Get-ADUser -Identity $sam -Properties DistinguishedName -ErrorAction Stop
                $checkResult.Status = 'Found'
                if ($rwGroup -and $rwGroup.member -contains $checkUser.DistinguishedName) {
                    $checkResult.MemberOf_RW = 'Yes'
                }
                if ($roGroup -and $roGroup.member -contains $checkUser.DistinguishedName) {
                    $checkResult.MemberOf_RO = 'Yes'
                }
            }
            catch {}
            [PSCustomObject]$checkResult
        }
        $additionalChecks
    }

}
catch {
    Write-Error "Failed to find or process account '$targetAccountName'. Error: $($_.Exception.Message)"
}
