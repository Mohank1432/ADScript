# 1. SET THE ACCOUNT NAME YOU WANT TO QUERY
$accountName = 'testuser1'

# 2. RUN THE QUERY BLOCK
try {
    # Get the user and all base properties needed for the report
    $user = Get-ADUser -Identity $accountName -Properties manager, whenCreated, pwdLastSet, memberOf, DistinguishedName -ErrorAction Stop

    # Define the properties for the final output object
    $report = [ordered]@{
        sAMAccountName         = $user.sAMAccountName
        AccountType            = 'Interactive' # Default value
        ManagerSAM             = ''
        ManagerName            = ''
        ManagerEmail           = ''
        ManagerDepartment      = ''
        WhenCreated            = $user.whenCreated
        PasswordLastSet        = 'Never'
        DaysSincePasswordReset = 'N/A'
        InScopeGroups          = ''
        RW_GroupExists         = 'No'
        RO_GroupExists         = 'No'
        RW_GroupManagerSAM     = ''
        RO_GroupManagerSAM     = ''
        RW_ManagerMatch        = 'No'
        RO_ManagerMatch        = 'No'
    }

    # --- Process User Details ---

    # Check for non-interactive group membership
    if ($user.memberOf -like '*CN=deny_interactvie,*') {
        $report.AccountType = 'Non-Interactive'
    }

    # Check for in-scope group membership
    $inScopeGroups = $user.memberOf | Where-Object { $_ -match 'CN=(phase1|phase2|inscope),' } | ForEach-Object { ($_ -split ',')[0].Replace('CN=', '') }
    if ($inScopeGroups) {
        $report.InScopeGroups = $inScopeGroups -join ", "
    }

    # Calculate password age
    if ($user.pwdLastSet -gt 0) {
        $pwdLastSetDate = [datetime]::FromFileTime($user.pwdLastSet)
        $report.PasswordLastSet = $pwdLastSetDate
        $report.DaysSincePasswordReset = ((Get-Date) - $pwdLastSetDate).Days
    }

    # Get Manager details
    if ($user.manager) {
        try {
            $manager = Get-ADUser -Identity $user.manager -Properties sAMAccountName, Name, EmailAddress, Department -ErrorAction Stop
            $report.ManagerSAM = $manager.sAMAccountName
            $report.ManagerName = $manager.Name
            $report.ManagerEmail = $manager.EmailAddress
            $report.ManagerDepartment = $manager.Department
        }
        catch { Write-Warning "Could not resolve manager: $($user.manager)" }
    }

    # --- Process Associated Groups (_RW and _RO) ---

    # Check for the _RW group and its manager
    try {
        $rwGroup = Get-ADGroup -Identity "$($user.sAMAccountName)_RW" -Properties managedBy -ErrorAction Stop
        $report.RW_GroupExists = 'Yes'
        if ($rwGroup.managedBy) {
            $rwManager = Get-ADUser -Identity $rwGroup.managedBy -Properties sAMAccountName -ErrorAction SilentlyContinue
            if ($rwManager) { $report.RW_GroupManagerSAM = $rwManager.sAMAccountName }
        }
    }
    catch {} # Suppress error if group doesn't exist

    # Check for the _RO group and its manager
    try {
        $roGroup = Get-ADGroup -Identity "$($user.sAMAccountName)_RO" -Properties managedBy -ErrorAction Stop
        $report.RO_GroupExists = 'Yes'
        if ($roGroup.managedBy) {
            $roManager = Get-ADUser -Identity $roGroup.managedBy -Properties sAMAccountName -ErrorAction SilentlyContinue
            if ($roManager) { $report.RO_GroupManagerSAM = $roManager.sAMAccountName }
        }
    }
    catch {} # Suppress error if group doesn't exist

    # --- Final Comparisons ---
    if (($report.ManagerSAM) -and ($report.ManagerSAM -eq $report.RW_GroupManagerSAM)) { $report.RW_ManagerMatch = 'Yes' }
    if (($report.ManagerSAM) -and ($report.ManagerSAM -eq $report.RO_GroupManagerSAM)) { $report.RO_ManagerMatch = 'Yes' }

    # --- Display the final, consolidated object ---
    [PSCustomObject]$report

}
catch {
    Write-Error "Failed to find or process account '$accountName'. Error: $($_.Exception.Message)"
}
