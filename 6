$targetAccountName = 'testuser1'

# 2. SET THE LIST OF ADDITIONAL USERS TO CHECK FOR MEMBERSHIP
$memberCheckUserSAMs = @(
    'anotheruser'
    'adminuser1'
    'testuser2'
)

# 3. RUN THE QUERY BLOCK
try {
    # --- Configuration ---
    # Define all groups to be checked for the 'InScopeGroups' column.
    $InScopeGroupNames = @("norotation", "30dayrotation", "90dayrotation", "180dayrotation", "365dayrotation", "phase1", "phase2")
    # Map group names to the number of days in their policy.
    $RotationPolicyMap = @{
        'norotation'     = -1
        '30dayrotation'  = 30
        '90dayrotation'  = 90
        '180dayrotation' = 180
        '365dayrotation' = 365
    }

    # Get the target user and all base properties
    $user = Get-ADUser -Identity $targetAccountName -Properties manager, whenCreated, pwdLastSet, memberOf, DistinguishedName -ErrorAction Stop

    # --- Pre-fetch Associated Groups (_RW and _RO) ---
    $rwGroup = $null
    $roGroup = $null
    try { $rwGroup = Get-ADGroup -Identity "$($user.sAMAccountName)_RW" -Properties managedBy, member -ErrorAction Stop } catch {}
    try { $roGroup = Get-ADGroup -Identity "$($user.sAMAccountName)_RO" -Properties managedBy, member -ErrorAction Stop } catch {}

    # --- Define the Main Report Structure ---
    $report = [ordered]@{
        sAMAccountName         = $user.sAMAccountName
        AccountType            = 'Interactive'
        ManagerSAM             = ''
        ManagerName            = ''
        ManagerEmail           = ''
        ManagerDepartment      = ''
        WhenCreated            = $user.whenCreated
        PasswordLastSet        = 'Never'
        DaysSincePasswordReset = 'N/A'
        InScopeGroups          = ''
        PasswordPolicyDays     = 'N/A'
        PasswordExpiryDate     = 'N/A'
        DaysUntilExpiry        = 'N/A'
        RW_GroupExists         = 'No'
        RO_GroupExists         = 'No'
        RW_GroupManagerSAM     = ''
        RO_GroupManagerSAM     = ''
        ManagerInRW_Group      = 'N/A'
        ManagerInRO_Group      = 'N/A'
        RW_ManagerMatch        = 'No'
        RO_ManagerMatch        = 'No'
    }

    # --- Process User and Manager Details ---
    if ($user.memberOf -like '*CN=deny_interactvie,*') { $report.AccountType = 'Non-Interactive' }
    
    $passwordLastSetDate = if ($user.pwdLastSet -gt 0) { [datetime]::FromFileTime($user.pwdLastSet) } else { $null }
    if ($passwordLastSetDate) {
        $report.PasswordLastSet = $passwordLastSetDate
        $report.DaysSincePasswordReset = ((Get-Date) - $passwordLastSetDate).Days
    }

    $manager = $null
    if ($user.manager) {
        try {
            $manager = Get-ADUser -Identity $user.manager -Properties sAMAccountName, Name, EmailAddress, Department, DistinguishedName -ErrorAction Stop
            $report.ManagerSAM = $manager.sAMAccountName; $report.ManagerName = $manager.Name; $report.ManagerEmail = $manager.EmailAddress; $report.ManagerDepartment = $manager.Department
        } catch { Write-Warning "Could not resolve manager: $($user.manager)" }
    }

    # --- âœ¨ FIX: Logic to handle multiple group memberships and prioritize password policy ---
    $userInScopeGroups = @()
    $policyApplied = $false
    # Create a regex from the InScopeGroupNames for efficient matching
    $inScopeRegex = 'CN=(' + ($InScopeGroupNames -join '|') + '),'
    $user.memberOf | Where-Object { $_ -match $inScopeRegex } | ForEach-Object {
        $groupName = $Matches[1]
        $userInScopeGroups += $groupName # Add all matching in-scope groups to the list

        # Check for a password policy, but only apply the first one found
        if (-not $policyApplied -and $RotationPolicyMap.ContainsKey($groupName)) {
            $policyDays = $RotationPolicyMap[$groupName]
            
            if ($policyDays -eq -1) {
                $report.PasswordPolicyDays = "No Rotation"
            } else {
                $report.PasswordPolicyDays = $policyDays
                if ($passwordLastSetDate) {
                    $expiryDate = $passwordLastSetDate.AddDays($policyDays)
                    $report.PasswordExpiryDate = $expiryDate
                    $report.DaysUntilExpiry = ($expiryDate.Date - (Get-Date).Date).Days
                }
            }
            $policyApplied = $true # Mark that a policy has been found and applied
        }
    }
    $report.InScopeGroups = $userInScopeGroups -join ", "

    # --- Process Associated Group Details ---
    if ($rwGroup) {
        $report.RW_GroupExists = 'Yes'; $report.ManagerInRW_Group = 'No'
        if ($rwGroup.managedBy) { $rwManager = Get-ADUser -Identity $rwGroup.managedBy -Properties sAMAccountName -EA SilentlyContinue; if ($rwManager) { $report.RW_GroupManagerSAM = $rwManager.sAMAccountName } }
        if ($manager -and $rwGroup.member -contains $manager.DistinguishedName) { $report.ManagerInRW_Group = 'Yes' }
    }

    if ($roGroup) {
        $report.RO_GroupExists = 'Yes'; $report.ManagerInRO_Group = 'No'
        if ($roGroup.managedBy) { $roManager = Get-ADUser -Identity $roGroup.managedBy -Properties sAMAccountName -EA SilentlyContinue; if ($roManager) { $report.RO_GroupManagerSAM = $roManager.sAMAccountName } }
        if ($manager -and $roGroup.member -contains $manager.DistinguishedName) { $report.ManagerInRO_Group = 'Yes' }
    }

    # --- Perform Final Comparisons for Manager ---
    if (($report.ManagerSAM) -and ($report.RW_GroupManagerSAM) -and ($report.ManagerSAM.Trim() -eq $report.RW_GroupManagerSAM.Trim())) { $report.RW_ManagerMatch = 'Yes' }
    if (($report.ManagerSAM) -and ($report.RO_GroupManagerSAM) -and ($report.ManagerSAM.Trim() -eq $report.RO_GroupManagerSAM.Trim())) { $report.RO_ManagerMatch = 'Yes' }

    # --- Display the main report and additional checks separately ---
    Write-Host "--- Primary Account Details: $($report.sAMAccountName) ---" -ForegroundColor Green
    [PSCustomObject]$report

    if ($memberCheckUserSAMs.Count -gt 0) {
        Write-Host "`n--- Additional User Membership Check ---" -ForegroundColor Green
        $additionalChecks = foreach ($sam in $memberCheckUserSAMs) {
            $checkResult = [ordered]@{ UserAccount = $sam; Status = 'Not Found'; MemberOf_RW = 'No'; MemberOf_RO = 'No' }
            try {
                $checkUser = Get-ADUser -Identity $sam -Properties DistinguishedName -ErrorAction Stop
                $checkResult.Status = 'Found'
                if ($rwGroup -and $rwGroup.member -contains $checkUser.DistinguishedName) { $checkResult.MemberOf_RW = 'Yes' }
                if ($roGroup -and $roGroup.member -contains $checkUser.DistinguishedName) { $checkResult.MemberOf_RO = 'Yes' }
            } catch {}
            [PSCustomObject]$checkResult
        }
        $additionalChecks
    }
}
catch {
    Write-Error "Failed to find or process account '$targetAccountName'. Error: $($_.Exception.Message)"
}
